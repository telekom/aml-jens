[tccommands]
  markfree=4 #in Millisecond
  markfull=14 #in Millisecond
  # Size of custom Queue in packets
  queuesizepackets=10000
  # AddonLatency in MS to add to all packets
  extralatency=0
  # set queue priority handling of packets: low, medium or high
  # qosmode=0: IPTOS_LOWDELAY increase packet priority in queue, IPTOS_THROUGHPUT decrease
  # qosmode=1: Any IPv6 and IPv4 traffic is sorted into the normal
  # qosmode=2: L4S mode, only ECT(1) ip packets get into high priority
  qosmode=2
  # Mark non-ect(1) Traffic as enabled
  l4sEnabledPreMarking=false
  # Mark the first packets with special ect
  signalDrpStart=false

[drplay]
  # Total number of network queues for drplay
  # value 1 : All traffic in uplink direction of the specified network interface is handled in one queue
  # value > 1 : Explicte netflows can be defined below to identify specific UE traffic, which should be handled in a sperate queue.
  #             If a netflow (src-ip:port->dest-ip:port) is not filtered by the netflows rules, it is routed through
  #             a common queue as UE0. But it is assigned to a seperate queue automatically, as long as its load exceeds ueminloadkbits.
  uenum=16
  # Define a netflow for each UE in your test setup you want to handle in a separate network quueue, the syntax of the filter is in nft syntax.
  # By this, corresponding nft rules are defined. If your application uses custom traffic filter/marking rules (iptables or nft),
  # check for possible interference.
  netflows= [
                    "ip saddr 192.168.2.0/24 udp sport 22 ip daddr 192.168.0.1 udp dport 22", # UE1
                    "ip daddr 192.168.178.75", # UE2
                    "ip daddr 192.168.178.9" # UE3
            ]
  ueminloadkbits=1000
  # true: the available capacity (from data rate pattern or bandwidth) is divided by the number of UEs/active Queues
  # false: use capacity (from data rate pattern or bandwidth) as specified for each UE
  sharecapacityresources=true
[postgres]
  dbname = "l4s_measure"
  host = "localhost"
  password = "aml_jens-cli_pw!"
  port = 5432
  user = "edge"

[drp]
  # MinimumDataRate for patterns
  minRateKbits = 500
  #Phase in MS before Networkshaping /DRP takes effect
  WarmupBeforeDrpMs = 2000

[drshow]
  scalePlots=true #instead of scrolling
  exportPath="/etc/jens-cli"
  #Used for filtering of flows in pipemode
  FilterLevel0Until=7       
  #Adds to Level0Until: Min count of flows for filter to kick in action
  FilterLevel1AddUntil=6    
  #Filter minium samples to display flow
  FilterLevel1MinSamples=15 
  #Or maximum time passed since last sample was received
  FilterLevel1SecsPassed=30 
  FilterLevel2AddUntil=6
  FilterLevel2MinSamples=15
  FilterLevel2SecsPassed=20
  FilterLevel3AddUntil=6
  FilterLevel3MinSamples=25
  FilterLevel3SecsPassed=10
